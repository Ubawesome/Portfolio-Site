<div class="tile @(Expanded ? "expanded" : "")" @attributes="@AdditionalAttributes" @onmousemove="@OnMouseMove" style="--bg-glow-x: @mousePosX; --bg-glow-y: @mousePosY; @(BackgroundColor != null ? $"--tile-body-bg-color: {BackgroundColor}" : "" )">
    <img class="tile-button tile-open-button" src="/css/icons/fi-xwsrxl-arrow-corner-solid.svg" />
    <img class="tile-button tile-close-button" src="/css/icons/fi-xwslxl-arrow-corner-solid.svg" />

    <div class="tile-image">
        @if (TileImage != null)
        {
            @TileImage
        }
    </div>
    <div class="tile-header" @onclick="OnHeaderClicked">
        @if (TileHeader != null)
        {
            <span>
                @TileHeader
            </span>
        }
    </div>
    <div class="tile-body" @onclick="OnBodyClicked">
        @if (TileBody != null)
        {
            <span>
                @TileBody
            </span>
        }
    </div>
</div>


@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter]
    public RenderFragment? TileImage { get; set; }

    [Parameter]
    public RenderFragment? TileHeader { get; set; }

    [Parameter]
    public RenderFragment? TileBody{ get; set; }

    [Parameter]
    public bool Expanded { get; set; }

    [Parameter]
    public string? BackgroundColor { get; set; }

    string mousePosX = "";
    string mousePosY = "";

    private void OnBodyClicked()
    {
        if (!Expanded)
        {
            Expanded = true;
        }
    }

    private void OnHeaderClicked()
    {
        if (Expanded)
        {
            Expanded = false;
        }
    }

    private void OnMouseMove(MouseEventArgs eventArgs) {
        mousePosX = $"{eventArgs.OffsetX.ToString()}px";
        mousePosY = $"{eventArgs.OffsetY.ToString()}px";
    }
}
