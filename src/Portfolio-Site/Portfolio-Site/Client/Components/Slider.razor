@inject IJSRuntime JSRuntime

<CascadingValue Value="this">
    <div @ref="@sliderElement" class="slider" @attributes="@AdditionalAttributes">
        <ul @ref="@sliderContentElement" class="slider-content">
            @ChildContent
        </ul>
        <div class="slider-controls">
            @foreach (var item in Items)
            {
                <button data-item="@item.Id" @onclick="@(() => SelectItem(item))"></button>
            }
        </div>
    </div>
</CascadingValue>


@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool Wrap { get; set; } = false;

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    public List<SliderItem> Items { get; set; } = new();

    ElementReference sliderElement;
    ElementReference sliderContentElement;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setUpSliderTrigger", sliderElement);
        }
    }

    public void Add(SliderItem item)
    {
        if (Items != null && !Items.Contains(item))
        {
            Items.Add(item);

            StateHasChanged();
        }
    }

    public async Task SelectItem(SliderItem item)
    {
        await JSRuntime.ScrollToElementInContainer(item.Reference, sliderContentElement, "x");
    }
}
